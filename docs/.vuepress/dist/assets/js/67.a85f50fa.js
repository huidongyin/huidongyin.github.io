(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{412:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("消费者拦截器主要在消费到消息或在提交消费位点时进行一些定制化的操作。消费者拦截器需要自定义实现 "),t("strong",[s._v("ConsumerInterceptor")]),s._v("接口。该接口包含三个方法。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerRecords")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onConsume")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConsumerRecords")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" records"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("onCommit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TopicPartition")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("OffsetAndMetadata")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" offsets"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("close")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("KafkaConsumer 会在"),t("code",[s._v("poll()")]),s._v("方法返回之前调用拦截器的"),t("code",[s._v("onConsume()")]),s._v("方法来对消息进行相的定制化操作，比如修改返回的消息内容、按照某种规则过滤消息(可能会减少 "),t("code",[s._v("poll()")]),s._v(" 方法返回的消息的个数)。如果"),t("code",[s._v("onConsume()")]),s._v("方法中抛出异常，那么会被捕获并记录到日志中，但是通常不会再向上传递。")]),s._v(" "),t("p",[s._v("KafkaConsumer 会在提交完消费位点之后调用拦截器的"),t("code",[s._v("onCommit()")]),s._v("方法，可以使用这个方法来记录跟踪所提交的位点信息，比如当消费者使用 "),t("code",[s._v("commitSync()")]),s._v("的无参方法时，我们不知道提交的消费位点的具体细节，而使用拦截器的 "),t("code",[s._v("onCommit()")]),s._v(" 方法却可以做到这一点。")]),s._v(" "),t("p",[t("code",[s._v("close()")]),s._v("方法和 ConsumerInterceptor 的父接口中的"),t("code",[s._v("configure()")]),s._v("方法与生产者的 ProducerInterceptor 接口中的用途一样。")]),s._v(" "),t("p",[t("strong",[s._v("实现自定义的 ConsumerInterceptor 之后，需要在 KafkaConsumer 中配置指定这个拦截器，同样是通过参数"),t("code",[s._v("interceptor.classes")]),s._v("指定。")])]),s._v(" "),t("p",[s._v("在消费者中也有拦截器链的概念，和生产者拦截器链条一样，也是按照 "),t("code",[s._v("interceptor.classes")]),s._v("参数配置的拦截器的顺序来一一执行的，同样也要防止副作用的发生。如果在拦截器链中某个拦截器执行失败，那么下一个拦截器会接着从上一个执行成功的拦截器继续执行。")]),s._v(" "),t("hr")])}),[],!1,null,null,null);t.default=e.exports}}]);