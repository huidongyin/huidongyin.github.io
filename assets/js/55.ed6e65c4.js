(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{399:function(n,s,a){"use strict";a.r(s);var t=a(4),e=Object(t.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[s("code",[n._v("ArrayList")]),n._v(" 是 Java 集合框架中的一个常用类，它实现了动态数组的数据结构，允许我们动态添加、删除元素，并提供了随机访问元素的能力。在这篇文章中，我们将深入研究 "),s("code",[n._v("ArrayList")]),n._v(" 的源码，理解其内部实现机制。")]),n._v(" "),s("h2",{attrs:{id:"_1-数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据结构"}},[n._v("#")]),n._v(" 1.数据结构")]),n._v(" "),s("ul",[s("li",[s("code",[n._v("modCount")]),n._v(" 记录了列表结构的修改次数，用于并发修改检测。")]),n._v(" "),s("li",[s("code",[n._v("DEFAULT_CAPACITY")]),n._v(" 是默认的初始化容量。")]),n._v(" "),s("li",[s("code",[n._v("EMPTY_ELEMENTDATA")]),n._v(" 是一个空数组，用于表示未初始化时的底层数组。")]),n._v(" "),s("li",[s("code",[n._v("DEFAULTCAPACITY_EMPTY_ELEMENTDATA")]),n._v(" 是默认构造函数使用的底层数组。")]),n._v(" "),s("li",[s("code",[n._v("elementData")]),n._v(" 是实际存储元素的底层数组。")]),n._v(" "),s("li",[s("code",[n._v("size")]),n._v(" 是集合中实际包含的元素个数。")])]),n._v(" "),s("div",{staticClass:"language-latex line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-latex"}},[s("code",[n._v("    \n    //父类 AbstractList 里面的属性，记录列表结构修改次数。\n    protected transient int modCount = 0;\n    \n    //默认初始化的容量大小\n    private static final int DEFAULT_CAPACITY = 10;\n\n    // 默认的空数组\n    private static final Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" EMPTY_ELEMENTDATA = "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(";\n\n    //默认的无参构造器初始化时的底层数组\n    private static final Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" DEFAULTCAPACITY_EMPTY_ELEMENTDATA = "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(";\n\n    // 底层数组\n    transient Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" elementData; // non-private to simplify nested class access\n\n    //集合中实际包含的元素个数\n    private int size;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br")])]),s("hr"),n._v(" "),s("h2",{attrs:{id:"_2-初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-初始化"}},[n._v("#")]),n._v(" 2.初始化")]),n._v(" "),s("p",[n._v("如果在创建的时候指定了长度，就会按照指定的长度初始化底层数组；否则创建一个空的数组。")]),n._v(" "),s("div",{staticClass:"language-latex line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-latex"}},[s("code",[n._v("    public ArrayList() "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    \n    public ArrayList(int initialCapacity) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        if (initialCapacity > 0) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            this.elementData = new Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("initialCapacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(";\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" else if (initialCapacity == 0) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            this.elementData = EMPTY_ELEMENTDATA;\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" else "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v('\n            throw new IllegalArgumentException("Illegal Capacity: "+\n                                               initialCapacity);\n        '),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("hr"),n._v(" "),s("h2",{attrs:{id:"_3-添加元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-添加元素"}},[n._v("#")]),n._v(" 3.添加元素")]),n._v(" "),s("p",[n._v("在 "),s("code",[n._v("ArrayList")]),n._v(" 中，当我们添加元素时，会首先判断底层数组是否已满。如果满了，就会调用 "),s("code",[n._v("grow")]),n._v(" 方法进行扩容。"),s("code",[n._v("grow")]),n._v(" 方法会计算新数组的长度，然后使用 "),s("code",[n._v("Arrays.copyOf")]),n._v(" 将原数组的数据复制到新数组中，最后将 "),s("code",[n._v("elementData")]),n._v(" 指向新数组。这样，就保证了底层数组具有足够的容量，可以容纳新的元素。")]),n._v(" "),s("div",{staticClass:"language-latex line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-latex"}},[s("code",[n._v("    //1.首次添加的时候，e是待添加元素，elementData 底层实际存储元素的数组，此时为空。s表示当前数组中实际含有的元素个数。\n    private void add(E e, Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" elementData, int s) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        //如果当前数组中实际含有的元素个数和当前存储元素的数组长度相等，说明数组满了，需要扩容。\n        if (s == elementData.length)\n            //扩容底层存储元素的数组\n            elementData = grow();\n        //把待添加的元素放到底层数组的s位置\n        elementData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" = e;\n        //将集合中存储的元素个数计数加一\n        size = s + 1;\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n    //最小容量：当前数组中元素个数+1 \n    private Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" grow(int minCapacity) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        //当前数组的长度\n        int oldCapacity = elementData.length;\n        //如果当前数组长度大于0 或者 当前数组不是默认的初始化空数组\n        if (oldCapacity > 0 || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            //计算新数组的长度\n            int newCapacity = ArraysSupport.newLength(\n                    oldCapacity, //当前数组长度\n                    minCapacity - oldCapacity, //最小容量和当前数组的差值 \n                    oldCapacity >> 1          //最小容量除以2 \n            );\n            //将原来数组的数据拷贝到新的数组，并且将原来数组的指针指向新的数组。\n            return elementData = Arrays.copyOf(elementData, newCapacity);\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" else "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            //此时表示当前数组尚未初始化过\n            //初始化当前数组，长度为 默认初始化长度和最小容量的最大值。\n            return elementData = new Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("Math.max(DEFAULT_CAPACITY, minCapacity)"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(";\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br")])]),s("hr"),n._v(" "),s("h2",{attrs:{id:"_4-计算扩容长度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-计算扩容长度"}},[n._v("#")]),n._v(" 4.计算扩容长度")]),n._v(" "),s("p",[s("code",[n._v("newLength")]),n._v(" 方法用于计算新的数组长度，它考虑了扩容的期望长度，同时确保新长度在合理范围内。如果超出了合理范围，就会调用 "),s("code",[n._v("hugeLength")]),n._v(" 方法处理。"),s("code",[n._v("hugeLength")]),n._v(" 方法会对预期长度进行判断，如果发生溢出则抛出异常，如果没有超出有效范围就返回"),s("code",[n._v("SOFT_MAX_ARRAY_LENGTH")]),n._v(",如果超出有效范围，但是尚未溢出，就直接返回。")]),n._v(" "),s("div",{staticClass:"language-latex line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-latex"}},[s("code",[n._v("    //参数一：表示旧数组的长度\n    //参数二：表示要扩容的长度\n    //参数三：扩容因子\n    public static int newLength(int oldLength, int minGrowth, int prefGrowth) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        //计算期望的长度，即新的数组长度，为 当前数组长度 + Max(要扩容的长度，当前数组长度的一半)\n        int prefLength = oldLength + Math.max(minGrowth, prefGrowth); // might overflow\n        // 如果期望长度大于0 并且 期望长度小于等于 0x7fffffff -8  ,返回期望长度。\n        if (0 < prefLength "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("&")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("&")]),n._v(" prefLength <= SOFT_MAX_ARRAY_LENGTH) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            return prefLength;\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" else "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            // 超出有效范围，则使用  hugeLength 方法处理。\n            return hugeLength(oldLength, minGrowth);\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    \n    //参数一：当前数组的长度\n    //参数二：要扩容的长度\n    private static int hugeLength(int oldLength, int minGrowth) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        //计算扩容后的长度\n        int minLength = oldLength + minGrowth;\n        //如果发生溢出，则抛出数组长度过长的异常。\n        if (minLength < 0) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v(' // overflow\n            throw new OutOfMemoryError(\n                "Required array length " + oldLength + " + " + minGrowth + " is too large");\n        '),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" else if (minLength <= SOFT_MAX_ARRAY_LENGTH) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            //如果小于等于 0x7fffffff -8 ， 就返回 0x7fffffff -8 。\n            return SOFT_MAX_ARRAY_LENGTH;\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" else "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            // 如果超出有效范围，但是尚未溢出，就直接返回。\n            return minLength;\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br")])]),s("hr"),n._v(" "),s("h2",{attrs:{id:"_5-移除元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-移除元素"}},[n._v("#")]),n._v(" 5.移除元素")]),n._v(" "),s("p",[s("code",[n._v("remove")]),n._v(" 方法首先检查索引的合法性，然后调用 "),s("code",[n._v("fastRemove")]),n._v(" 方法进行快速移除。"),s("code",[n._v("fastRemove")]),n._v(" 方法通过数组拷贝的方式将要移除的元素之后的元素向前移动一位，并将数组末尾的引用置为 "),s("code",[n._v("null")]),n._v("。最后，更新 "),s("code",[n._v("size")]),n._v(" 为新的大小。")]),n._v(" "),s("div",{staticClass:"language-latex line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-latex"}},[s("code",[n._v("    //参数：表示要移除元素的位置\n    public E remove(int index) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        //判断索引是否在合法范围内\n        Objects.checkIndex(index, size);\n        //获取底层数组的引用\n        final Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(' es = elementData;\n        //将要移除的元素保存在 oldValue 中。\n        @SuppressWarnings("unchecked") E oldValue = (E) es'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(";\n         //根据索引和原数组，进行快速移除操作\n        fastRemove(es, index);\n\n        return oldValue;\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    \n    private void fastRemove(Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" es, int i) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        //增加计数，用于支持并发修改检测\n        modCount++;\n        //新的数组容量\n        final int newSize;\n        //新的数组容量 == 当前容量 -1 ； 如果要移除的元素不在数组末尾\n        if ((newSize = size - 1) > i)\n            //将后续的元素向前移动一位\n            System.arraycopy(es, i + 1, es, i, newSize - i);\n        //将数组末尾的引用设置为 null ， 并更新size为新的size。\n        es"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("size = newSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" = null;\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br")])]),s("hr"),n._v(" "),s("h2",{attrs:{id:"_6-缩容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-缩容"}},[n._v("#")]),n._v(" 6.缩容")]),n._v(" "),s("p",[s("code",[n._v("trimToSize()")]),n._v("判断如果当前元素个数小于当前数组长度，并且当前元素个数为空，返回空数组，否则按照当前元素个数搞一个新数组。")]),n._v(" "),s("div",{staticClass:"language-latex line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-latex"}},[s("code",[n._v("    //缩容\n    public void trimToSize() "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        modCount++;\n        //如果当前元素个数 小于 当前数组长度\n        if (size < elementData.length) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            //当前元素个数为空，返回空数组，否则按照当前元素个数搞一个新数组。\n            elementData = (size == 0)\n              ? EMPTY_ELEMENTDATA\n              : Arrays.copyOf(elementData, size);\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br")])]),s("hr"),n._v(" "),s("h2",{attrs:{id:"_7-concurrentmodificationexception"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-concurrentmodificationexception"}},[n._v("#")]),n._v(" 7.ConcurrentModificationException")]),n._v(" "),s("p",[n._v("ArrayList内部的Itr迭代器会在获取下一个元素的时候检查modCount字段是否发生了变化，如果发生了变化就会抛出此异常。")]),n._v(" "),s("div",{staticClass:"language-latex line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-latex"}},[s("code",[n._v("        final void checkForComodification() "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            if (modCount != expectedModCount)\n                throw new ConcurrentModificationException();\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("hr")])}),[],!1,null,null,null);s.default=e.exports}}]);