(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{485:function(s,a,e){"use strict";e.r(a);var t=e(4),n=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("容器是基于容器技术所建立和运行的轻量级应用运行环境，它是 Docker 封装和管理应用程序或微服务的“集装箱”。在 Docker 中，容器算是最核心的部分了，掌握容器的操作也是 Docker 中最基础的技能了。在这一节中，我们会深入了解容器，展示关于容器的操作。")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"_1-容器的创建和启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-容器的创建和启动"}},[s._v("#")]),s._v(" 1.容器的创建和启动")]),s._v(" "),a("p",[s._v("在了解容器的各项操作之前，我们再来回顾一下之前我们所提及的容器状态流转。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/huidongyin/DrawingBed/main/Docker/202401082125993.webp",alt:""}})]),s._v(" "),a("p",[s._v("在这幅图中，我们可以看到，Docker 容器的生命周期里分为五种状态，其分别代表着：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("Created")]),s._v("：容器已经被创建，容器所需的相关资源已经准备就绪，但容器中的程序还未处于运行状态。")]),s._v(" "),a("li",[a("strong",[s._v("Running")]),s._v("：容器正在运行，也就是容器中的应用正在运行。")]),s._v(" "),a("li",[a("strong",[s._v("Paused")]),s._v("：容器已暂停，表示容器中的所有程序都处于暂停 ( 不是停止 ) 状态。")]),s._v(" "),a("li",[a("strong",[s._v("Stopped")]),s._v("：容器处于停止状态，占用的资源和沙盒环境都依然存在，只是容器中的应用程序均已停止。")]),s._v(" "),a("li",[a("strong",[s._v("Deleted")]),s._v("：容器已删除，相关占用的资源及存储在 Docker 中的管理信息也都已释放和移除。")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"_1-1-创建容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-创建容器"}},[s._v("#")]),s._v(" 1.1 创建容器")]),s._v(" "),a("p",[s._v("当我们选择好镜像以后，就可以通过 "),a("code",[s._v("docker create")]),s._v(" 这个命令来创建容器了。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("👨 huidong 📌  ~ ⌚ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("-01-08 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":07:54\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" create nginx:1.12\nUnable to "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" image "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'nginx:1.12'")]),s._v(" locally\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.12")]),s._v(": Pulling from library/nginx\n18d6337cc906: Pull complete \n876b800bf964: Pull complete \n6621b463f910: Pull complete \nDigest: sha256:72daaf46f11cc753c4eab981cbf869919bd1fee3d2170a2adeac12400f494728\nStatus: Downloaded newer image "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" nginx:1.12\nc17066f4f84b6573a64b214a949a04e4fa36d5a1307166ce1be90b58d36f15d9\n👨 huidong 📌  ~ ⌚ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("-01-08 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":20:09\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("执行 "),a("code",[s._v("docker create")]),s._v(" 后，Docker 会根据我们所给出的镜像创建容器，在控制台中会打印出 Docker 为容器所分配的容器 ID，此时容器是处于 "),a("strong",[s._v("Created")]),s._v(" 状态的。")]),s._v(" "),a("p",[s._v("之后我们对容器的操作可以通过这个容器 ID 或者它的缩略形式进行，但用容器 ID 操作容器就和用镜像 ID 操作镜像一样烦闷，所以我们更习惯于使用容器名来操作容器。")]),s._v(" "),a("p",[s._v("要使用容器名操作容器，就先得给容器命名，在创建容器时，我们可以通过 "),a("code",[s._v("--name")]),s._v(" 这个选项来配置容器名。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("👨 huidong 📌  ~ ⌚ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("-01-08 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":07:56\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" create "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" nginx nginx:1.12\n👨 huidong 📌  ~ ⌚ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("-01-08 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":07:56\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("hr"),s._v(" "),a("h3",{attrs:{id:"_1-2-启动容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-启动容器"}},[s._v("#")]),s._v(" 1.2 启动容器")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("docker create")]),s._v(" 创建的容器，是处于 "),a("strong",[s._v("Created")]),s._v(" 状态的，其内部的应用程序还没有启动，所以我们需要通过 "),a("code",[s._v("docker start")]),s._v(" 命令来启动它。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" start nginx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("由于我们为容器指定了名称，这样的操作会更加自然，所以我们非常推荐为每个被创建的容器都进行命名。")]),s._v(" "),a("p",[s._v("当容器启动后，其中的应用就会运行起来，容器的几个生命周期也会绑定到了这个应用上，这个之前我们已经提及，这里就不在赘述。只要应用程序还在运行，那么容器的状态就会是 "),a("strong",[s._v("Running")]),s._v("，除非进行一些修改容器的操作。")]),s._v(" "),a("p",[s._v("在 Docker 里，还允许我们通过 "),a("code",[s._v("docker run")]),s._v(" 这个命令将 "),a("code",[s._v("docker create")]),s._v(" 和 "),a("code",[s._v("docker start")]),s._v(" 这两步操作合成为一步，进一步提高工作效率。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--name")]),s._v(" nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-d")]),s._v(" nginx:1.12\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("通过 "),a("code",[s._v("docker run")]),s._v(" 创建的容器，在创建完成之后会直接启动起来，不需要我们再使用 "),a("code",[s._v("docker start")]),s._v(" 去启动了。")]),s._v(" "),a("blockquote",[a("p",[s._v("通常来说我们启动容器会期望它运行在“后台”，而 "),a("code",[s._v("docker run")]),s._v(" 在启动容器时，会采用“前台”运行这种方式，这时候我们的控制台就会衔接到容器上，不能再进行其他操作了。我们可以通过 "),a("code",[s._v("-d")]),s._v(" 或 "),a("code",[s._v("--detach")]),s._v(" 这个选项告诉 Docker 在启动后将程序与控制台分离，使其进入“后台”运行。")])]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"_2-管理容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-管理容器"}},[s._v("#")]),s._v(" 2.管理容器")]),s._v(" "),a("p",[s._v("容器创建和启动后，除了关注应用程序是否功能正常外，我们也会关注容器的状态等内容。")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("docker ps")]),s._v(" 这个命令，我们可以列出 Docker 中的容器。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("👨 huidong 📌  ~ ⌚ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("-01-08 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":20:09\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("               \nCONTAINER ID   IMAGE             COMMAND                   CREATED       STATUS       PORTS                                                  NAMES\nd78ade871100   zookeeper:3.7.1   "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/docker-entrypoint.…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks ago   Up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2888")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3888")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:2183-"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2181")]),s._v("/tcp   zk3\n28906b3c79a9   zookeeper:3.7.1   "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/docker-entrypoint.…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks ago   Up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2888")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3888")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:2182-"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2181")]),s._v("/tcp   zk2\ne084981867c0   zookeeper:3.7.1   "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/docker-entrypoint.…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks ago   Up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2888")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3888")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:2181-"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2181")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v("/tcp   zk1\n👨 huidong 📌  ~ ⌚ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("-01-08 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":25:22\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("默认情况下，"),a("code",[s._v("docker ps")]),s._v(" 列出的容器是处于运行中的容器，如果要列出所有状态的容器，需要增加 "),a("code",[s._v("-a")]),s._v(" 或 "),a("code",[s._v("--all")]),s._v(" 选项。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("👨 huidong 📌  ~ ⌚ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("-01-08 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":25:22\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v("\nCONTAINER ID   IMAGE                       COMMAND                   CREATED         STATUS                      PORTS                                                  NAMES\nc17066f4f84b   nginx:1.12                  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nginx -g \'daemon of…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" minutes ago   Created                                                                            busy_ride\nd78ade871100   zookeeper:3.7.1             "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/docker-entrypoint.…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks ago     Up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks                  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2888")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3888")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:2183-"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2181")]),s._v("/tcp   zk3\n28906b3c79a9   zookeeper:3.7.1             "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/docker-entrypoint.…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks ago     Up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks                  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2888")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3888")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:2182-"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2181")]),s._v("/tcp   zk2\ne084981867c0   zookeeper:3.7.1             "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/docker-entrypoint.…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks ago     Up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks                  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2888")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3888")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0:2181-"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2181")]),s._v("/tcp, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v("/tcp   zk1\n00b4e2fd98b9   wurstmeister/kafka:latest   "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start-kafka.sh"')]),s._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" months ago    Exited "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("137")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks ago                                                           kafka2\n61b5246ab5b4   wurstmeister/kafka:latest   "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start-kafka.sh"')]),s._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" months ago    Exited "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("137")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks ago                                                           kafka1\n101ed4754423   wurstmeister/kafka:latest   "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"start-kafka.sh"')]),s._v("          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" months ago    Exited "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("137")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks ago                                                           kafka0\n3c74bbc7b4a6   zookeeper:3.5.9             "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/docker-entrypoint.…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" months ago    Exited "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("143")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks ago                                                           kafka-zookeeper\n9b91e8ad8b52   f4c42847bb1a                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"docker-entrypoint.s…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" months ago    Exited "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" months ago                                                            redis\n7d531dd3bc50   a4ad24fe52cd                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/entrypoint.sh mysq…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" months ago    Exited "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" weeks ago                                                             mysql\n487906ca8e22   8bcb4cae919c                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/bin/tini -- /usr/l…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" months ago    Exited "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("137")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" months ago                                                          kibana\naac895ebef63   e082d8ac7e5e                "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/bin/tini -- /usr/l…"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" months ago    Exited "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("143")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" months ago                                                          elasticsearch\n👨 huidong 📌  ~ ⌚ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("-01-08 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":26:01\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("blockquote",[a("p",[a("code",[s._v("-q")]),s._v("：只显示容器编号。")])]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("docker ps")]),s._v(" 的结果中，我们可以看到几项关于容器的信息。其中 "),a("strong",[s._v("CONTAINER ID")]),s._v("、"),a("strong",[s._v("IMAGE")]),s._v("、"),a("strong",[s._v("CREATED")]),s._v("、"),a("strong",[s._v("NAMES")]),s._v(" 都比较容易理解，分别表示容器 ID，容器所基于的镜像，容器的创建时间和容器的名称。")]),s._v(" "),a("p",[s._v("结果中的 "),a("strong",[s._v("COMMAND")]),s._v(" 表示的是容器中主程序 ( 也就是与容器生命周期所绑定进程所关联的程序 ) 的启动命令，这条命令是在镜像内定义的，而容器的启动其实质就是启动这条命令。关于 "),a("strong",[s._v("COMMAND")]),s._v(" 的更多知识，我们在之后的 Docker 镜像制作中会更详细的解读。")]),s._v(" "),a("p",[s._v("结果中的 "),a("strong",[s._v("STATUS")]),s._v(" 表示容器所处的状态，其值和我们之前所谈到的状态有所区别，主要是因为这里还记录了其他的一些信息。在这里，常见的状态表示有三种：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("Created")]),s._v(" 此时容器已创建，但还没有被启动过。")]),s._v(" "),a("li",[a("strong",[s._v("Up")]),s._v(" [ Time ] 这时候容器处于正在运行状态，而这里的 Time 表示容器从开始运行到查看时的时间。")]),s._v(" "),a("li",[a("strong",[s._v("Exited")]),s._v(" ([ Code ]) [ Time ] 容器已经结束运行，这里的 Code 表示容器结束运行时，主程序返回的程序退出码，而 Time 则表示容器结束到查看时的时间。")])]),s._v(" "),a("p",[s._v("既然是列出容器，应该为命令取一些带有 "),a("code",[s._v("ls")]),s._v(" 字眼的名字，为啥会用类似 Linux 中查看进程的 "),a("code",[s._v("ps")]),s._v(" 呢？这其实有一部分历史原因，由于容器并非真的包裹住了进程，而只是隔离了进程，进程还是允许在宿主机操作系统之上的，所以列出镜像的过程到更新是查看正在运行的进程，故而有了这样的名字。")]),s._v(" "),a("p",[s._v("当然，在 Docker 逐渐成熟后，命令的命名也没有原来那么随意了，已经逐渐转换为使用大家广泛认可的形式。只是 "),a("code",[s._v("docker ps")]),s._v(" 这条命令，还保留着复古的风格。")]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"_2-1-停止和删除容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-停止和删除容器"}},[s._v("#")]),s._v(" 2.1 停止和删除容器")]),s._v(" "),a("p",[s._v("要将正在运行的容器停止，我们可以使用 "),a("code",[s._v("docker stop")]),s._v(" 命令。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" stop nginx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("容器停止后，其维持的文件系统沙盒环境还是存在的，内部被修改的内容也都会保留，我们可以通过 "),a("code",[s._v("docker start")]),s._v(" 命令将这个容器再次启动。")]),s._v(" "),a("p",[s._v("当我们需要完全删除容器时，可以通过 "),a("code",[s._v("docker rm")]),s._v(" 命令将容器进行删除。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" nginx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("正在运行中的容器默认情况下是不能被删除的，我们可以通过增加 "),a("code",[s._v("-f")]),s._v(" 或 "),a("code",[s._v("--force")]),s._v(" 选项来让 "),a("code",[s._v("docker rm")]),s._v(" 强制停止并删除容器，不过这种做法并不妥当。")]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"_2-2-随手删除容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-随手删除容器"}},[s._v("#")]),s._v(" 2.2 随手删除容器")]),s._v(" "),a("p",[s._v("与其他虚拟机不同，Docker 的轻量级容器设计，讲究随用随开，随关随删。也就是说，当我们短时间内不需要使用容器时，最佳的做法是删除它而不是仅仅停止它。")]),s._v(" "),a("p",[s._v("容器一旦删除，其内部的文件系统变动也就消失了，这样做岂不是非常麻烦。要解决这个疑惑，其根本是解决为什么我们会对容器中的文件系统做更改。我这里总结了两个对虚拟环境做更改的原因，以及在 Docker 中如何优雅的解决它们。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("在使用虚拟机或其他虚拟化所搭建的虚拟环境时，我们倾向于使用一个干净的系统镜像并搭建程序的运行环境，由于将这类虚拟环境制作成镜像的成本较高，耗时也非常久，所以我们对于一些细小的改动倾向于修改后保持虚拟环境不被清除即可。而在 Docker 中，打包镜像的成本是非常低的，其速度也快得惊人，所以如果我们要为程序准备一些环境或者配置，完全可以直接将它们打包至新的镜像中，下次直接使用这个新的镜像创建容器即可。")])]),s._v(" "),a("li",[a("p",[s._v("容器中应用程序所产生的一些文件数据，是非常重要的，如果这些数据随着容器的删除而丢失，其损失是非常巨大的。对于这类由应用程序所产生的数据，并且需要保证它们不会随着容器的删除而消失的，我们可以使用 Docker 中的数据卷来单独存放。由于数据卷是独立于容器存在的，所以其能保证数据不会随着容器的删除而丢失。")])])]),s._v(" "),a("p",[s._v("事实上，容器的随用随删既能保证在我们不需要它们的时候它们不会枉占很多资源，也保证了每次我们建立和启动容器时，它们都是“热乎”的崭新版本。大家都知道，系统卡就重装，而借助 Docker 秒级的容器启停特性，我们就是可以这么任性的“重装”。")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"_3-进入容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-进入容器"}},[s._v("#")]),s._v(" 3.进入容器")]),s._v(" "),a("p",[s._v("很多时候，我们需要的操作并不仅仅是按镜像所给出的命令启动容器而已，我们还会希望进一步了解容器或操作容器，这时候最佳的方式就是让我们进入到容器了。")]),s._v(" "),a("p",[s._v("我们知道，容器是一个隔离运行环境的东西，它里面除了镜像所规定的主进程外，其他的进程也是能够运行的，Docker 为我们提供了一个命令 "),a("code",[s._v("docker exec")]),s._v(" 来让容器运行我们所给出的命令。")]),s._v(" "),a("p",[s._v("这里我们试试用容器中的 "),a("code",[s._v("more")]),s._v(" 命令查看容器的主机名定义。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("👨 huidong 📌  ~ ⌚ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("-01-08 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":36:34\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" zk1 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("more")]),s._v(" /etc/hosts       \n::::::::::::::\n/etc/hosts\n::::::::::::::\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1\tlocalhost\n::1\tlocalhost ip6-localhost ip6-loopback\nfe00::0\tip6-localnet\nff00::0\tip6-mcastprefix\nff02::1\tip6-allnodes\nff02::2\tip6-allrouters\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.19")]),s._v(".0.3\te084981867c0\n👨 huidong 📌  ~ ⌚ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("-01-08 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":36:55\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[a("code",[s._v("docker exec")]),s._v(" 命令能帮助我们在正在运行的容器中运行指定命令，这对于服务控制，运维监控等有着不错的应用场景。但是在开发过程中，我们更常使用它来作为我们进入容器的桥梁。")]),s._v(" "),a("p",[s._v("我们操作 Linux 这个过程，并不是 Linux 内部的某些机能，而是通过控制台软件来完成的。控制台软件分析我们的命令，将其转化为对 Linux 的系统调用，实现了我们对 Linux 的操作。若不是这样，生涩的系统调用方法对普通开发者来说简直就是黑洞一般的存在，更别提用它们控制系统了。")]),s._v(" "),a("p",[s._v("在 Linux 中，大家熟悉的控制台软件应该是 Shell 和 Bash 了，它们分别由 "),a("code",[s._v("sh")]),s._v(" 和 "),a("code",[s._v("bash")]),s._v(" 这两个程序启动。")]),s._v(" "),a("p",[s._v("说到这里，有读者一定想到了，既然有这两个控制台程序，我们只要在容器里执行它们，然后通过它们去控制容器内的环境，岂不就可以“自由的飞翔”了吗。没错，这里说的进入容器，就是通过 "),a("code",[s._v("docker exec")]),s._v(" 命令来启动 "),a("code",[s._v("sh")]),s._v(" 或 "),a("code",[s._v("bash")]),s._v("，并通过它们实现对容器内的虚拟环境的控制。")]),s._v(" "),a("p",[s._v("由于 "),a("code",[s._v("bash")]),s._v(" 的功能要比 "),a("code",[s._v("sh")]),s._v(" 丰富，所以在能够使用 "),a("code",[s._v("bash")]),s._v(" 的容器里，我们优先选择它作为控制台程序。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("👨 huidong 📌  ~ ⌚ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("-01-08 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":36:55\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-it")]),s._v(" zk1 /bin/bash         \nroot@e084981867c0:/apache-zookeeper-3.7.1-bin"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("在借助 "),a("code",[s._v("docker exec")]),s._v(" 进入容器的时候，我们需要特别注意命令中的两个选项不可或缺，即 "),a("code",[s._v("-i")]),s._v(" 和 "),a("code",[s._v("-t")]),s._v(" ( 它们俩可以利用简写机制合并成 "),a("code",[s._v("-it")]),s._v(" )。")]),s._v(" "),a("p",[s._v("其中 "),a("code",[s._v("-i")]),s._v(" ( "),a("code",[s._v("--interactive")]),s._v(" ) 表示保持我们的输入流，只有使用它才能保证控制台程序能够正确识别我们的命令。而 "),a("code",[s._v("-t")]),s._v(" ( "),a("code",[s._v("--tty")]),s._v(" ) 表示启用一个伪终端，形成我们与 "),a("code",[s._v("bash")]),s._v(" 的交互，如果没有它，我们无法看到 "),a("code",[s._v("bash")]),s._v(" 内部的执行结果。")]),s._v(" "),a("p",[s._v("熟悉通过在容器中执行控制台程序进而进入容器这种方法，在开发过程中你能更轻松的观察容器中发生了什么，也更容易排查程序或者环境引起的问题。")]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"_3-1-衔接到容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-衔接到容器"}},[s._v("#")]),s._v(" 3.1 衔接到容器")]),s._v(" "),a("p",[s._v("Docker 为我们提供了一个 "),a("code",[s._v("docker attach")]),s._v(" 命令，用于将当前的输入输出流连接到指定的容器上。")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("👨 huidong 📌  ~ ⌚ "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("-01-08 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v(":43:53\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" attach zk1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这个命令最直观的效果可以理解为我们将容器中的主程序转为了“前台”运行 ( 与 "),a("code",[s._v("docker run")]),s._v(" 中的 "),a("code",[s._v("-d")]),s._v(" 选项有相反的意思 )。")]),s._v(" "),a("p",[s._v("由于我们的输入输出流衔接到了容器的主程序上，我们的输入输出操作也就直接针对了这个程序，而我们发送的 Linux 信号也会转移到这个程序上。例如我们可以通过 "),a("code",[s._v("Ctrl + C")]),s._v(" 来向程序发送停止信号，让程序停止 ( 从而容器也会随之停止 )。")]),s._v(" "),a("p",[s._v("在实际开发中，由于 "),a("code",[s._v("docker attach")]),s._v(" 限制较多，功能也不够强大，所以不做详细的解读了。")]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"_3-2-其他容器操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-其他容器操作"}},[s._v("#")]),s._v(" 3.2 其他容器操作")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("退出容器")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("exit")]),s._v(" :退出并关闭")]),s._v(" "),a("li",[a("code",[s._v("ctrl+P+Q")]),s._v(" :容器不停止退出")])])]),s._v(" "),a("li",[a("p",[s._v("重启容器")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("docker restart 容器id")])])])]),s._v(" "),a("li",[a("p",[s._v("强制停止")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("docker kill 容器id")])])])]),s._v(" "),a("li",[a("p",[s._v("查看容器日志")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("docker logs -f -t --tail 3 容器id")])]),s._v(" "),a("li",[a("code",[s._v("-t")]),s._v("  加入时间戳")]),s._v(" "),a("li",[a("code",[s._v("-f")]),s._v("  跟随最新的日志打印")]),s._v(" "),a("li",[a("code",[s._v("--tail")]),s._v("   显示最后多少条")])])]),s._v(" "),a("li",[a("p",[s._v("查看容器内运行的进程")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("docker top 30f00b23e1c5")])])])]),s._v(" "),a("li",[a("p",[s._v("从容器内拷贝文件到主机上")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("docker cp 容器ID：容器内路径 目的主机路径")])]),s._v(" "),a("li",[a("code",[s._v("docker cp xxxxx:/tmp/yum.log /root")])])])])]),s._v(" "),a("hr")])}),[],!1,null,null,null);a.default=n.exports}}]);