(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{397:function(n,s,e){"use strict";e.r(s);var a=e(4),t=Object(a.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h2",{attrs:{id:"_1-数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据结构"}},[n._v("#")]),n._v(" 1.数据结构")]),n._v(" "),s("p",[n._v("这段代码定义了 "),s("code",[n._v("LinkedList")]),n._v(" 类的三个成员变量，它们分别是：")]),n._v(" "),s("ol",[s("li",[s("strong",[n._v("size：")]),n._v(" 用于记录链表中元素的个数。这个变量是 "),s("code",[n._v("transient")]),n._v(" 修饰的，表示在对象序列化时不需要考虑该字段。"),s("code",[n._v("size")]),n._v(" 的值随着链表的操作（如插入和删除）而动态变化，反映了链表的当前大小。")]),n._v(" "),s("li",[s("strong",[n._v("first：")]),n._v(" 是一个指向链表头部的指针。它是 "),s("code",[n._v("transient")]),n._v(" 的，表示在对象序列化时不需要保存该字段。"),s("code",[n._v("first")]),n._v(" 指向链表的第一个节点，即头结点，头结点是链表的入口，通过它可以访问到链表中的第一个元素。")]),n._v(" "),s("li",[s("strong",[n._v("last：")]),n._v(" 是一个指向链表尾部的指针。同样地，它也是 "),s("code",[n._v("transient")]),n._v(" 的。"),s("code",[n._v("last")]),n._v(" 指向链表的最后一个节点，即尾节点，尾节点是链表的结束，通过它可以访问到链表中的最后一个元素。")])]),n._v(" "),s("p",[n._v("这三个成员变量共同组成了 "),s("code",[n._v("LinkedList")]),n._v(" 的基本结构。"),s("code",[n._v("size")]),n._v(" 记录了链表中元素的个数，而 "),s("code",[n._v("first")]),n._v(" 和 "),s("code",[n._v("last")]),n._v(" 则分别指向链表的头部和尾部，提供了访问链表两端元素的入口。通过这些成员变量，"),s("code",[n._v("LinkedList")]),n._v(" 实现了对链表的基本操作，如插入、删除、获取元素等。")]),n._v(" "),s("div",{staticClass:"language-latex line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-latex"}},[s("code",[n._v("    //集合容量大小\n    transient int size = 0;\n    //指向头结点的指针\n    transient Node<E> first;\n    //指向尾节点的指针\n    transient Node<E> last;\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br")])]),s("hr"),n._v(" "),s("h2",{attrs:{id:"_2-node节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-node节点"}},[n._v("#")]),n._v(" 2.Node节点")]),n._v(" "),s("p",[n._v("这段代码定义了一个名为 "),s("code",[n._v("Node")]),n._v(" 的静态内部类，用于表示 "),s("code",[n._v("LinkedList")]),n._v(" 中的节点。")]),n._v(" "),s("ol",[s("li",[s("code",[n._v("E item")]),n._v("： 这是一个泛型变量，表示节点中实际存储的数据元素。每个节点都包含一个数据元素，可以是任何类型，具体类型由创建节点时指定。")]),n._v(" "),s("li",[s("code",[n._v("Node<E> next")]),n._v("： 这是一个指向后继节点的指针。每个节点都知道它的下一个节点是什么。如果该节点是链表的最后一个节点，则 "),s("code",[n._v("next")]),n._v(" 为 "),s("code",[n._v("null")]),n._v("。")]),n._v(" "),s("li",[s("code",[n._v("Node<E> prev")]),n._v("： 这是一个指向前驱节点的指针。类似地，每个节点也知道它的前一个节点是什么。如果该节点是链表的第一个节点，则 "),s("code",[n._v("prev")]),n._v(" 为 "),s("code",[n._v("null")]),n._v("。")]),n._v(" "),s("li",[s("code",[n._v("Node(Node<E> prev, E element, Node<E> next)")]),n._v("： 这是节点类的构造方法。通过此构造方法，可以创建一个具有给定前驱节点、数据元素和后继节点的节点。这个构造方法允许在链表中方便地插入新的节点。")])]),n._v(" "),s("ul",[s("li",[s("code",[n._v("prev")]),n._v(" 参数表示前一个节点。")]),n._v(" "),s("li",[s("code",[n._v("element")]),n._v(" 参数表示当前节点存储的数据元素。")]),n._v(" "),s("li",[s("code",[n._v("next")]),n._v(" 参数表示后一个节点。")])]),n._v(" "),s("p",[n._v("通过这个 "),s("code",[n._v("Node")]),n._v(" 类，"),s("code",[n._v("LinkedList")]),n._v(" 内部的每个元素都被包装成一个节点，节点之间通过 "),s("code",[n._v("next")]),n._v(" 和 "),s("code",[n._v("prev")]),n._v(" 指针连接成链表。这种节点结构允许在链表中进行高效的插入和删除操作，因为它们提供了直接访问前驱和后继节点的指针。")]),n._v(" "),s("div",{staticClass:"language-latex line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-latex"}},[s("code",[n._v("    private static class Node<E> "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        // 实际数据\n        E item;\n        //指向后继结点的指针\n        Node<E> next;\n        //指向前驱结点的指针\n        Node<E> prev;\n\n        Node(Node<E> prev, E element, Node<E> next) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            this.item = element;\n            this.next = next;\n            this.prev = prev;\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("hr"),n._v(" "),s("h2",{attrs:{id:"_3-初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-初始化"}},[n._v("#")]),n._v(" 3.初始化")]),n._v(" "),s("div",{staticClass:"language-latex line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-latex"}},[s("code",[n._v("    public LinkedList() "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("hr"),n._v(" "),s("h2",{attrs:{id:"_4-头插"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-头插"}},[n._v("#")]),n._v(" 4.头插")]),n._v(" "),s("ol",[s("li",[s("code",[n._v("**public void addFirst(E e)**")]),s("strong",[n._v("：")])])]),n._v(" "),s("ul",[s("li",[n._v("此方法是对外暴露的接口，用于在链表的头部插入新元素。")]),n._v(" "),s("li",[n._v("调用了 "),s("code",[n._v("linkFirst(e)")]),n._v(" 方法来完成具体的插入逻辑。")])]),n._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("code",[n._v("**private void linkFirst(E e)**")]),s("strong",[n._v("：")])])]),n._v(" "),s("ul",[s("li",[n._v("此方法是实际执行插入操作的内部方法。")]),n._v(" "),s("li",[n._v("首先，声明了一个指针 "),s("code",[n._v("f")]),n._v("，指向当前链表的头结点 "),s("code",[n._v("first")]),n._v("。")]),n._v(" "),s("li",[n._v("创建一个新的节点 "),s("code",[n._v("newNode")]),n._v("，该节点的数据元素为传入的参数 "),s("code",[n._v("e")]),n._v("，后继节点指针指向原来的头结点 "),s("code",[n._v("f")]),n._v("，前驱节点指针初始化为 "),s("code",[n._v("null")]),n._v("。")]),n._v(" "),s("li",[n._v("将头指针 "),s("code",[n._v("first")]),n._v(" 指向新的节点 "),s("code",[n._v("newNode")]),n._v("，表示新的节点成为新的头结点。")]),n._v(" "),s("li",[n._v("如果原来的链表为空（头结点为 "),s("code",[n._v("null")]),n._v("），将尾指针 "),s("code",[n._v("last")]),n._v(" 也指向新的节点，因为链表中只有一个元素。")]),n._v(" "),s("li",[n._v("如果原来的链表不为空，将原头结点的前驱节点指针指向新的头结点 "),s("code",[n._v("newNode")]),n._v("。")]),n._v(" "),s("li",[n._v("增加链表中元素数量 "),s("code",[n._v("size")]),n._v("。")]),n._v(" "),s("li",[n._v("更新结构修改计数器 "),s("code",[n._v("modCount")]),n._v("，用于支持迭代器的快速失败机制。")])]),n._v(" "),s("p",[n._v("总体而言，这段代码通过创建新节点，并调整头结点和尾节点的指针，实现了在链表头部插入新元素的操作。")]),n._v(" "),s("div",{staticClass:"language-latex line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-latex"}},[s("code",[n._v("    public void addFirst(E e) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        linkFirst(e);\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    \n    private void linkFirst(E e) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        //声明一个指针指向头结点\n        final Node<E> f = first;\n        //创建一个新的节点，并且将它的后继节点指针指向原来的头结点\n        final Node<E> newNode = new Node<>(null, e, f);\n        //让指向头结点的指针指向新的节点\n        first = newNode;\n        //如果原来的集合是空，让尾指针也指向新的节点\n        if (f == null)\n            last = newNode;\n        else\n            //此时说明原来的集合不为空，让原头结点的前驱节点指向新的头结点\n            f.prev = newNode;\n        //增加集合中元素数量\n        size++;\n        modCount++;\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("hr"),n._v(" "),s("h2",{attrs:{id:"_5-尾插"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-尾插"}},[n._v("#")]),n._v(" 5.尾插")]),n._v(" "),s("ol",[s("li",[s("code",[n._v("**public void addLast(E e)**")]),s("strong",[n._v("：")])])]),n._v(" "),s("ul",[s("li",[n._v("此方法是对外暴露的接口，用于在链表的尾部插入新元素。")]),n._v(" "),s("li",[n._v("调用了 "),s("code",[n._v("linkLast(e)")]),n._v(" 方法来完成具体的插入逻辑。")])]),n._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[s("code",[n._v("**void linkLast(E e)**")]),s("strong",[n._v("：")])])]),n._v(" "),s("ul",[s("li",[n._v("此方法是实际执行插入操作的内部方法。")]),n._v(" "),s("li",[n._v("首先，声明了一个指针 "),s("code",[n._v("l")]),n._v("，指向当前链表的尾节点 "),s("code",[n._v("last")]),n._v("。")]),n._v(" "),s("li",[n._v("创建一个新的节点 "),s("code",[n._v("newNode")]),n._v("，该节点的数据元素为传入的参数 "),s("code",[n._v("e")]),n._v("，前驱节点指针指向原来的尾节点 "),s("code",[n._v("l")]),n._v("，后继节点指针初始化为 "),s("code",[n._v("null")]),n._v("。")]),n._v(" "),s("li",[n._v("将尾指针 "),s("code",[n._v("last")]),n._v(" 指向新的节点 "),s("code",[n._v("newNode")]),n._v("，表示新的节点成为新的尾节点。")]),n._v(" "),s("li",[n._v("如果原来的链表为空（尾节点为 "),s("code",[n._v("null")]),n._v("），将头指针 "),s("code",[n._v("first")]),n._v(" 也指向新的节点，因为链表中只有一个元素。")]),n._v(" "),s("li",[n._v("如果原来的链表不为空，将原尾节点的后继节点指针指向新的尾节点 "),s("code",[n._v("newNode")]),n._v("。")]),n._v(" "),s("li",[n._v("增加链表中元素数量 "),s("code",[n._v("size")]),n._v("。")]),n._v(" "),s("li",[n._v("更新结构修改计数器 "),s("code",[n._v("modCount")]),n._v("，用于支持迭代器的快速失败机制。")])]),n._v(" "),s("p",[n._v("总体而言，这段代码通过创建新节点，并调整头结点和尾节点的指针，实现了在链表尾部插入新元素的操作。")]),n._v(" "),s("div",{staticClass:"language-latex line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-latex"}},[s("code",[n._v("    public void addLast(E e) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        linkLast(e);\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n    void linkLast(E e) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        //声明一个指向尾节点的指针\n        final Node<E> l = last;\n        //声明一个新节点，并让新节点的前驱节点指向原来的尾节点\n        final Node<E> newNode = new Node<>(l, e, null);\n        //让last指针指向新节点\n        last = newNode;\n        //如果原来的集合中不存在元素，就让头结点指针也指向新节点\n        if (l == null)\n            first = newNode;\n        else\n            //原来的集合中存在元素，就让原来尾节点的后继指针指向新的节点\n            l.next = newNode;\n        //增加节点中的元素个数\n        size++;\n        modCount++;\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("hr"),n._v(" "),s("h2",{attrs:{id:"_6-移除元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-移除元素"}},[n._v("#")]),n._v(" 6.移除元素")]),n._v(" "),s("p",[s("code",[n._v("remove()")]),n._v("首先通过"),s("code",[n._v("node()")]),n._v("方法找到当前索引位置的元素，然后通过"),s("code",[n._v("unlink()")]),n._v("方法从链表中移除指定的节点 "),s("code",[n._v("x")]),n._v("。具体步骤如下：")]),n._v(" "),s("ol",[s("li",[n._v("获取节点 "),s("code",[n._v("x")]),n._v(" 中的元素值。")]),n._v(" "),s("li",[n._v("获取节点 "),s("code",[n._v("x")]),n._v(" 的下一个节点 "),s("code",[n._v("next")]),n._v(" 和上一个节点 "),s("code",[n._v("prev")]),n._v(" 的引用。")]),n._v(" "),s("li",[n._v("如果上一个节点 "),s("code",[n._v("prev")]),n._v(" 为空，说明当前节点 "),s("code",[n._v("x")]),n._v(" 是链表的头节点，将链表头指针 "),s("code",[n._v("first")]),n._v(" 指向下一个节点 "),s("code",[n._v("next")]),n._v("。")]),n._v(" "),s("li",[n._v("如果上一个节点 "),s("code",[n._v("prev")]),n._v(" 不为空，将上一个节点的下一个节点指针 "),s("code",[n._v("prev.next")]),n._v(" 指向下一个节点 "),s("code",[n._v("next")]),n._v("，同时将当前节点的上一个节点指针 "),s("code",[n._v("x.prev")]),n._v(" 置为 null，帮助垃圾回收。")]),n._v(" "),s("li",[n._v("如果下一个节点 "),s("code",[n._v("next")]),n._v(" 为空，说明当前节点 "),s("code",[n._v("x")]),n._v(" 是链表的尾节点，将链表尾指针 "),s("code",[n._v("last")]),n._v(" 指向上一个节点 "),s("code",[n._v("prev")]),n._v("。")]),n._v(" "),s("li",[n._v("如果下一个节点 "),s("code",[n._v("next")]),n._v(" 不为空，将下一个节点的上一个节点指针 "),s("code",[n._v("next.prev")]),n._v(" 指向上一个节点 "),s("code",[n._v("prev")]),n._v("，同时将当前节点的下一个节点指针 "),s("code",[n._v("x.next")]),n._v(" 置为 null，帮助垃圾回收。")]),n._v(" "),s("li",[n._v("将当前节点的元素值 "),s("code",[n._v("x.item")]),n._v(" 置为 null，帮助垃圾回收。")]),n._v(" "),s("li",[n._v("更新链表大小 "),s("code",[n._v("size")]),n._v("。")]),n._v(" "),s("li",[n._v("更新结构修改计数器 "),s("code",[n._v("modCount")]),n._v("，用于支持迭代器的快速失败机制。")]),n._v(" "),s("li",[n._v("返回被移除节点的元素值。")])]),n._v(" "),s("div",{staticClass:"language-latex line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-latex"}},[s("code",[n._v("    public E remove(int index) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        checkElementIndex(index);\n        return unlink(node(index));\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    \n    Node<E> node(int index) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        // assert isElementIndex(index);\n    \n        // 如果索引在链表的前半部分\n        if (index < (size >> 1)) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            Node<E> x = first; // 从链表头开始遍历\n            for (int i = 0; i < index; i++)\n                x = x.next; // 移动到下一个节点\n            return x; // 返回找到的节点\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" else "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            // 如果索引在链表的后半部分\n            Node<E> x = last; // 从链表尾部开始遍历\n            for (int i = size - 1; i > index; i--)\n                x = x.prev; // 移动到上一个节点\n            return x; // 返回找到的节点\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n\n    E unlink(Node<E> x) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        // assert x != null;\n        final E element = x.item; // 获取节点中的元素值\n        final Node<E> next = x.next; // 获取下一个节点\n        final Node<E> prev = x.prev; // 获取上一个节点\n    \n        // 如果上一个节点为空，说明当前节点是链表的头节点\n        if (prev == null) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            first = next; // 将链表头指针指向下一个节点\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" else "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            prev.next = next; // 将上一个节点的下一个节点指针指向下一个节点\n            x.prev = null; // 将当前节点的上一个节点指针置为 null，帮助垃圾回收\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    \n        // 如果下一个节点为空，说明当前节点是链表的尾节点\n        if (next == null) "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            last = prev; // 将链表尾指针指向上一个节点\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" else "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            next.prev = prev; // 将下一个节点的上一个节点指针指向上一个节点\n            x.next = null; // 将当前节点的下一个节点指针置为 null，帮助垃圾回收\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    \n        x.item = null; // 将当前节点的元素值置为 null，帮助垃圾回收\n        size--; // 更新链表大小\n        modCount++; // 更新结构修改计数器，用于迭代器的快速失败机制\n        return element; // 返回被移除节点的元素值\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);