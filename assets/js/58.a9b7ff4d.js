(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{401:function(a,s,t){"use strict";t.r(s);var e=t(4),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"_1-hashset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-hashset"}},[a._v("#")]),a._v(" 1.HashSet")]),a._v(" "),s("p",[s("code",[a._v("HashSet")]),a._v(" 是 Java 集合框架中的一个实现类，它继承自 "),s("code",[a._v("AbstractSet")]),a._v(" 类，实现了 "),s("code",[a._v("Set")]),a._v(" 接口。下面我们对 "),s("code",[a._v("HashSet")]),a._v(" 的关键部分进行解析。")]),a._v(" "),s("h3",{attrs:{id:"_1-内部成员"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-内部成员"}},[a._v("#")]),a._v(" 1. 内部成员")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 实际存储元素的对象")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("transient")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 默认 map 的 value 使用此对象存储")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PRESENT")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("ul",[s("li",[s("code",[a._v("map")]),a._v(": 一个用于存储元素的 "),s("code",[a._v("HashMap")]),a._v(" 对象。"),s("code",[a._v("HashMap")]),a._v(" 以键值对的形式存储元素，而 "),s("code",[a._v("HashSet")]),a._v(" 中的元素相当于是 "),s("code",[a._v("HashMap")]),a._v(" 中的键，"),s("code",[a._v("PRESENT")]),a._v(" 对象则是对应的值。")]),a._v(" "),s("li",[s("code",[a._v("PRESENT")]),a._v(": 一个静态的 "),s("code",[a._v("Object")]),a._v(" 对象，用于作为 "),s("code",[a._v("HashMap")]),a._v(" 的值。由于在 "),s("code",[a._v("HashMap")]),a._v(" 中只关心键而不关心值，因此将值统一设置为 "),s("code",[a._v("PRESENT")]),a._v("，以节省内存。")])]),a._v(" "),s("h3",{attrs:{id:"_2-构造方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-构造方法"}},[a._v("#")]),a._v(" 2. 构造方法")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 实际上创建一个 HashSet，在底层创建了一个 HashMap")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    map "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("ul",[s("li",[s("code",[a._v("HashSet")]),a._v(" 的默认构造方法会创建一个 "),s("code",[a._v("HashMap")]),a._v(" 对象，并将其赋给 "),s("code",[a._v("map")]),a._v(" 成员变量。这样，"),s("code",[a._v("HashSet")]),a._v(" 的元素实际上是作为 "),s("code",[a._v("HashMap")]),a._v(" 的键存储的，而值统一为 "),s("code",[a._v("PRESENT")]),a._v("。")])]),a._v(" "),s("h3",{attrs:{id:"_3-添加元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-添加元素"}},[a._v("#")]),a._v(" 3. 添加元素")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("E")]),a._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PRESENT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("ul",[s("li",[s("code",[a._v("add")]),a._v(" 方法将元素 "),s("code",[a._v("e")]),a._v(" 作为键，"),s("code",[a._v("PRESENT")]),a._v(" 作为值放入 "),s("code",[a._v("HashMap")]),a._v(" 中。如果之前不存在该键，"),s("code",[a._v("put")]),a._v(" 方法会返回 "),s("code",[a._v("null")]),a._v("，此时表示元素成功添加，返回 "),s("code",[a._v("true")]),a._v("；如果之前已经存在该键，"),s("code",[a._v("put")]),a._v(" 方法会返回先前的值，此时表示元素未添加，返回 "),s("code",[a._v("false")]),a._v("。")])]),a._v(" "),s("h3",{attrs:{id:"_4-移除元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-移除元素"}},[a._v("#")]),a._v(" 4. 移除元素")]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("PRESENT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("ul",[s("li",[s("code",[a._v("remove")]),a._v(" 方法通过 "),s("code",[a._v("HashMap")]),a._v(" 的 "),s("code",[a._v("remove")]),a._v(" 方法移除元素 "),s("code",[a._v("o")]),a._v("。如果 "),s("code",[a._v("remove")]),a._v(" 返回的值等于 "),s("code",[a._v("PRESENT")]),a._v("，表示成功移除元素，返回 "),s("code",[a._v("true")]),a._v("；否则，表示元素不存在或者移除失败，返回 "),s("code",[a._v("false")]),a._v("。")])]),a._v(" "),s("h3",{attrs:{id:"_5-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-总结"}},[a._v("#")]),a._v(" 5.总结")]),a._v(" "),s("p",[s("code",[a._v("HashSet")]),a._v(" 通过底层的 "),s("code",[a._v("HashMap")]),a._v(" 实现了无序、不重复的集合。元素的存储使用键值对的形式，而值则被统一设置为 "),s("code",[a._v("PRESENT")]),a._v(" 对象。这种设计简化了底层实现，同时保持了 "),s("code",[a._v("Set")]),a._v(" 接口的特性。在使用 "),s("code",[a._v("HashSet")]),a._v(" 时，我们可以充分利用其高效的查找和添加元素的特性。")]),a._v(" "),s("hr"),a._v(" "),s("h2",{attrs:{id:"_2-linkedhashset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-linkedhashset"}},[a._v("#")]),a._v(" 2.LinkedHashSet")]),a._v(" "),s("p",[s("code",[a._v("LinkedHashSet")]),a._v("继承了"),s("code",[a._v("HashSet")]),a._v("，底层实际上创建了一个"),s("code",[a._v("LinkedHashMap")]),a._v("。")]),a._v(" "),s("hr")])}),[],!1,null,null,null);s.default=n.exports}}]);