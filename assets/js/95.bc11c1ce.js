(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{438:function(t,s,a){"use strict";a.r(s);var r=a(4),e=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-mybatis架构分层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-mybatis架构分层"}},[t._v("#")]),t._v(" 1.MyBatis架构分层")]),t._v(" "),s("p",[t._v("mybatis的整体架构分为三层，分别是基础支持层，核心处理层，接口层。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/huidongyin/DrawingBed/main/MyBatis/202311062219899.png",alt:"mybatis架构图.png"}})]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_1-1接口层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1接口层"}},[t._v("#")]),t._v(" 1.1接口层")]),t._v(" "),s("p",[t._v("核心对象是 SqlSession，它是上层应用和 MyBatis打交道的桥梁，SqlSession 上定义了非常多的对数据库的操作方法。接口层在接收到调用请求的时候，会调用核心处理层的相应模块来完成具体的数据库操作。")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_1-2核心处理层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2核心处理层"}},[t._v("#")]),t._v(" 1.2核心处理层")]),t._v(" "),s("p",[t._v("既然叫核心处理层，也就是跟数据库操作相关的动作都是在这一层完成的。")]),t._v(" "),s("p",[t._v("核心处理层主要做了这几件事：")]),t._v(" "),s("p",[t._v("把接口中传入的参数解析并且映射成 JDBC 类型；")]),t._v(" "),s("p",[t._v("解析 xml 文件中的 SQL 语句，包括插入参数，和动态 SQL 的生成；")]),t._v(" "),s("p",[t._v("执行 SQL 语句；")]),t._v(" "),s("p",[t._v("处理结果集，并映射成 Java 对象。")]),t._v(" "),s("p",[t._v("插件也属于核心层，这是由它的工作方式和拦截的对象决定的。")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_1-3基础支持层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3基础支持层"}},[t._v("#")]),t._v(" 1.3基础支持层")]),t._v(" "),s("p",[t._v("基础支持层主要是一些抽取出来的通用的功能（实现复用），用来支持核心处理层的功能。比如数据源、缓存、日志、xml 解析、反射、IO、事务等等这些功能。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/huidongyin/DrawingBed/main/MyBatis/202311062220056.jpeg",alt:"mybatis架构.jpg"}})]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_2-再看mybatis的sql执行流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-再看mybatis的sql执行流程"}},[t._v("#")]),t._v(" 2.再看mybatis的SQL执行流程")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/huidongyin/DrawingBed/main/MyBatis/202311062220035.png",alt:"mybatis的SQL执行流程图.png"}})]),t._v(" "),s("p",[t._v("SQL语句的执行设涉及到很多个组件，其中比较重要的就是Executor，StatementHandler，ParameterHandler，ResultSetHandler。Executor主要负责维护一级缓存和二级缓存，并提供事务管理的相关操作。他会将数据库相关的操作交给StatementHandler完成。StatementHandler首先通过ParameterHandler完成SQL语句的实参绑定，然后通过jdk内置的Statement对象执行SQL语句并得到结果集，最后通过ResultSetHandler完成结果集的映射，得到结果对象并返回。")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"_3-核心对象生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-核心对象生命周期"}},[t._v("#")]),t._v(" 3. 核心对象生命周期")]),t._v(" "),s("h3",{attrs:{id:"_3-1-sqlsessionfactorybuiler"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-sqlsessionfactorybuiler"}},[t._v("#")]),t._v(" 3.1 SqlSessionFactoryBuiler")]),t._v(" "),s("p",[t._v("它 是 用 来 构 建 SqlSessionFactory 的 ， 而SqlSessionFactory 只需要一个，所以只要构建了这一个 SqlSessionFactory，它的使命就完成了，也就没有存在的意义了。所以它的生命周期只存在于方法的局部。")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_3-2-sqlsessionfactory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-sqlsessionfactory"}},[t._v("#")]),t._v(" 3.2 SqlSessionFactory")]),t._v(" "),s("p",[t._v("SqlSessionFactory 是用来创建 SqlSession 的，每次应用程序访问数据库，都需要创建一个会话。因为我们一直有创建会话的需要，所以 SqlSessionFactory 应该存在于应用的整个生命周期中（作用域是应用作用域）。创建 SqlSession 只需要一个实例来做这件事就行了，否则会产生很多的混乱，和浪费资源。所以我们要采用单例模式。")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_3-3-sqlsession"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-sqlsession"}},[t._v("#")]),t._v(" 3.3 SqlSession")]),t._v(" "),s("p",[t._v("SqlSession 是一个会话，因为它不是线程安全的，不能在线程间共享。所以我们在请求开始的时候创建一个 SqlSession 对象，在请求结束或者说方法执行完毕的时候要及时关闭它（一次请求或者操作中）。")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"_3-4-mapper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-mapper"}},[t._v("#")]),t._v(" 3.4 Mapper")]),t._v(" "),s("p",[t._v("Mapper（实际上是一个代理对象）是从 SqlSession 中获取的。它的作用是发送 SQL 来操作数据库的数据。它应该在一个 SqlSession 事务方法之内。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("对象")]),t._v(" "),s("th",[t._v("生命周期")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("SqlSessionFactoryBuiler")]),t._v(" "),s("td",[t._v("方法局部（method）")])]),t._v(" "),s("tr",[s("td",[t._v("SqlSessionFactory（单例）")]),t._v(" "),s("td",[t._v("应用级别（application）")])]),t._v(" "),s("tr",[s("td",[t._v("SqlSession")]),t._v(" "),s("td",[t._v("请求和操作（request/method）")])]),t._v(" "),s("tr",[s("td",[t._v("Mapper")]),t._v(" "),s("td",[t._v("方法（method）")])])])]),t._v(" "),s("hr")])}),[],!1,null,null,null);s.default=e.exports}}]);